stages:
  - pull
  - build
  - push
  - cleanup
  - deploy

before_script:
  - docker login -u "gitlab-ci-token" -p "$CI_BUILD_TOKEN" "$CI_REGISTRY"

pull:
  stage: pull
  allow_failure: true
#  tags:
#    - test
  script:
    - docker pull "$CI_REGISTRY_IMAGE"

build:
  stage: build
#  tags:
#    - test
  script:
    - docker build --tag="$CI_PIPELINE_ID":"$CI_COMMIT_REF_NAME" --cache-from="$CI_REGISTRY_IMAGE":latest .

push latest:
  stage: push
#  tags:
#    - test
  script:
    - docker tag "$CI_PIPELINE_ID":"$CI_COMMIT_REF_NAME" "$CI_REGISTRY_IMAGE":latest
    - docker push "$CI_REGISTRY_IMAGE":latest

push dev:
  stage: push
  only:
    - dev
#  tags:
#    - test
  script:
    - docker tag "$CI_PIPELINE_ID":"$CI_COMMIT_REF_NAME" "$CI_REGISTRY_IMAGE":dev
    - docker push "$CI_REGISTRY_IMAGE":dev

push:
  stage: push
  only:
    - master
#  tags:
#    - test
  script:
    - docker tag "$CI_PIPELINE_ID":"$CI_COMMIT_REF_NAME" "$CI_REGISTRY_IMAGE":master
    - docker push "$CI_REGISTRY_IMAGE":master

cleanup:
  stage: cleanup
  when: always
#  tags:
#    - test
  script:
    - docker rmi -f "$CI_PIPELINE_ID":"$CI_COMMIT_REF_NAME"
    - docker-compose -p "$CI_PIPELINE_ID" -f docker-compose.ci.yml down --remove-orphans
    - docker system prune -a -f

deploy:
  stage: deploy
  only:
    - master
  when: manual
  script:
    - docker-compose -f docker-compose.deploy.yml down
    - docker-compose -f docker-compose.deploy.yml up -d
